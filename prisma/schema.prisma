// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum to define primary sync service
enum PrimaryService {
  SPOTIFY
  YOUTUBE
}

// Model for storing user details
model User {
  id              String       @id @default(uuid())
  email           String       @unique
  username        String       @unique
  profilePicture  String?
  access_token    String
  refresh_token   String?
  createdAt       DateTime     @default(now())

  // Sync settings
  keepInSync      Boolean      @default(true)
  primaryService  PrimaryService? 

  // Last sync details
  lastSyncTime    DateTime?
  lastSyncTracks  Json?

  // Relations
  spotifyTokens       SpotifyData[]       @relation(name: "UserSpotifyTokens")
  youtubeTokens       YouTubeData[]       @relation(name: "UserYouTubeTokens")
  playlistMigrations  PlaylistMigration[] 

  sessions        Session[]
}

model Session {
  session_id String  @id @default(uuid()) @map("session_id")
  user_id    String  @map("user_id")

  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  expires_at DateTime @default(dbgenerated("NOW() + INTERVAL '1 day'")) @map("expires_at")

  @@map("sessions")
  @@unique([user_id, session_id])
}

// Model for storing Spotify access tokens
model SpotifyData {
  id                         String     @id @default(uuid())
  spotify_user_id            String     @unique 
  username                   String
  picture                    String
  access_token               String
  refresh_token              String
  last_SyncedAt              DateTime?
  last_playlistTrackIds_hash String?
  last_TrackIds              String?
  notFoundTracks             String?
  retryToFindTracks          String?
  createdAt                  DateTime @default(now())

  // Relation to User
  user   User @relation(name: "UserSpotifyTokens", fields: [userId], references: [id])
  userId String
}

// Model for storing YouTube access tokens
model YouTubeData {
  id                         String      @id @default(uuid())
  username                   String
  picture                    String
  access_token               String
  refresh_token              String
  last_SyncedAt              DateTime?
  last_playlistTrackIds_hash String?
  last_TracksIds             String?
  notFoundTracks             String?
  retryToFindTracks          String?
  createdAt                  DateTime @default(now())

  // Relation to User
  user   User @relation(name: "UserYouTubeTokens", fields: [userId], references: [id])
  userId String
}

model PlaylistMigration {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  sourcePlaylistId      String
  sourcePlatform        String
  destinationPlatform   String

  // ðŸ†• Destination playlist info
  destinationPlaylistId   String?
  destinationPlaylistName String?

  sourceTrackIds        String[]
  migrationCounter      Int       @default(0)

  // ðŸ”„ Sync Job Config
  autoSyncEnabled       Boolean   @default(false)
  syncIntervalMinutes   Int?
  nextSyncAt            DateTime?
  lastSyncAt            DateTime?
  lastSyncStatus        String?
  lastSyncError         String?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([userId, sourcePlaylistId, sourcePlatform, destinationPlatform])
}
